// <auto-generated />
using System;
using GoElectrify.DAL.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoElectrify.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GoElectrify.BLL.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChargerId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EstimatedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChargerId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StationId", "StartAt");

                    b.HasIndex("UserId", "StartAt");

                    b.ToTable("Bookings", null, t =>
                        {
                            t.HasCheckConstraint("CK_Bookings_Status_UPPER", "Status = UPPER(Status)");
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Charger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ConnectorTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PowerKw")
                        .HasColumnType("int");

                    b.Property<decimal?>("PricePerKwh")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ConnectorTypeId");

                    b.HasIndex("StationId");

                    b.HasIndex("StationId", "Status");

                    b.ToTable("Chargers", null, t =>
                        {
                            t.HasCheckConstraint("CK_Chargers_Status_UPPER", "Status = UPPER(Status)");
                        });

                    b.HasData(
                        new
                        {
                            Id = 400,
                            Code = "FU-DC1",
                            ConnectorTypeId = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 150,
                            PricePerKwh = 6500.0000m,
                            StationId = 300,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 401,
                            Code = "FU-AC1",
                            ConnectorTypeId = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 22,
                            PricePerKwh = 4500.0000m,
                            StationId = 300,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 402,
                            Code = "FU-DC2",
                            ConnectorTypeId = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 150,
                            PricePerKwh = 6500.0000m,
                            StationId = 300,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 403,
                            Code = "FU-DC3",
                            ConnectorTypeId = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 150,
                            PricePerKwh = 6500.0000m,
                            StationId = 300,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 404,
                            Code = "FU-AC2",
                            ConnectorTypeId = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 22,
                            PricePerKwh = 4500.0000m,
                            StationId = 300,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 410,
                            Code = "SC-DC1",
                            ConnectorTypeId = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 200,
                            PricePerKwh = 6500.0000m,
                            StationId = 301,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 411,
                            Code = "SC-AC1",
                            ConnectorTypeId = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 22,
                            PricePerKwh = 4500.0000m,
                            StationId = 301,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 420,
                            Code = "GP-DC1",
                            ConnectorTypeId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 120,
                            PricePerKwh = 6500.0000m,
                            StationId = 302,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 421,
                            Code = "GP-CHA1",
                            ConnectorTypeId = 5,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 50,
                            PricePerKwh = 6000.0000m,
                            StationId = 302,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 422,
                            Code = "GP-AC1",
                            ConnectorTypeId = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PowerKw = 22,
                            PricePerKwh = 4500.0000m,
                            StationId = 302,
                            Status = "ONLINE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.ChargerLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Current")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<decimal?>("PowerKw")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<DateTime>("SampleAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("SessionEnergyKwh")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<int?>("SocPercent")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Voltage")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.HasKey("Id");

                    b.HasIndex("ChargerId", "SampleAt")
                        .IsUnique();

                    b.ToTable("ChargerLogs", (string)null);
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.ChargingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AvgPowerKw")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("ChargerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EnergyKwh")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasFilter("[BookingId] IS NOT NULL");

                    b.HasIndex("ChargerId");

                    b.HasIndex("StationId", "StartedAt");

                    b.HasIndex("UserId", "StartedAt");

                    b.ToTable("ChargingSessions", null, t =>
                        {
                            t.HasCheckConstraint("CK_ChargingSessions_Status_UPPER", "Status = UPPER(Status)");
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.ConnectorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("MaxPowerKw")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ConnectorTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "DC fast (Combo 1)",
                            MaxPowerKw = 200,
                            Name = "CSS1",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "DC fast (Combo 2)",
                            MaxPowerKw = 350,
                            Name = "CSS2",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "SAE J1772 (AC)",
                            MaxPowerKw = 7,
                            Name = "Type1-AC",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "IEC 62196-2 Type 2 (Mennekes)",
                            MaxPowerKw = 22,
                            Name = "Type2-AC",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "DC fast (legacy/JDM)",
                            MaxPowerKw = 62,
                            Name = "CHAdeMO",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.ExternalLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "ProviderUserId")
                        .IsUnique();

                    b.ToTable("ExternalLogins", (string)null);
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChargerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChargerId");

                    b.HasIndex("ReportedByUserId");

                    b.HasIndex("StationId", "ReportedAt");

                    b.ToTable("Incidents", null, t =>
                        {
                            t.HasCheckConstraint("CK_Incidents_Severity_UPPER", "Severity = UPPER(Severity)");

                            t.HasCheckConstraint("CK_Incidents_Status_UPPER", "Status = UPPER(Status)");
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("UserId", "TokenHash")
                        .IsUnique();

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Driver",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Staff",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("Latitude", "Longitude");

                    b.ToTable("Stations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Stations_Status_UPPER", "Status = UPPER(Status)");
                        });

                    b.HasData(
                        new
                        {
                            Id = 300,
                            Address = "7 Đ. D1, Long Thạnh Mỹ, Thủ Đức, Hồ Chí Minh 700000, Việt Nam",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Nạp đầy năng lượng cho xe, sẵn sàng cho việc học! Trạm sạc xe điện hiện đại ngay trong khuôn viên Đại học FPT. Dành cho sinh viên, giảng viên và khách tham quan, giúp bạn sạc pin tiện lợi, an toàn trong giờ học và làm việc. Lựa chọn xanh cho một khuôn viên đại học thông minh.",
                            Latitude = 10.84167829167107m,
                            Longitude = 106.81083314772492m,
                            Name = "FPT University",
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 301,
                            Address = "Số 1 Lưu Hữu Phước, Đông Hoà, Dĩ An, Hồ Chí Minh, Việt Nam",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Điểm sạc lý tưởng cho cộng đồng sinh viên năng động! Trạm sạc xe điện được đặt ngay tại Nhà Văn hóa Sinh viên TP.HCM. Bạn có thể an tâm sạc đầy pin trong khi tham gia các hoạt động, học nhóm hay uống cà phê. Nhanh chóng, an toàn và cực kỳ tiện lợi.",
                            Latitude = 10.876244851905408m,
                            Longitude = 106.80600195446553m,
                            Name = "Nhà Văn hóa Sinh viên TP.HCM",
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 302,
                            Address = "TTTM Vincom Mega Mall Grand Park, 88 Phước Thiện, Long Bình, Thủ Đức, Hồ Chí Minh, Việt Nam",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Mua sắm thả ga, không lo hết pin! Trạm sạc xe điện hiện đại nay đã có mặt tại Vincom Mega Mall Grand Park. Hãy sạc đầy pin cho xe trong lúc bạn và gia đình thỏa sức mua sắm, ăn uống và giải trí. Trải nghiệm tiện ích nhân đôi, cho chuyến đi thêm trọn vẹn.",
                            Latitude = 10.843429972631098m,
                            Longitude = 106.84260840302923m,
                            Name = "Vincom Mega Mall Grand Park",
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.StationStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("StationId", "UserId")
                        .IsUnique();

                    b.ToTable("StationStaff", (string)null);
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalKwh")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subscriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationDays = 30,
                            Name = "Go Spark – Basic",
                            Price = 360000m,
                            TotalKwh = 100m,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationDays = 30,
                            Name = "Go Pulse - Family",
                            Price = 690000m,
                            TotalKwh = 200m,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationDays = 30,
                            Name = "Go Drive – Pro",
                            Price = 3990000m,
                            TotalKwh = 1200m,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationDays = 30,
                            Name = "Go Flow – Flexible",
                            Price = 190000m,
                            TotalKwh = 50m,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.TopupIntent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ProviderRef")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("QrContent")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("RawWebhook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("WalletId");

                    b.HasIndex("Provider", "ProviderRef")
                        .IsUnique();

                    b.ToTable("TopupIntents", (string)null);
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ChargingSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChargingSessionId");

                    b.HasIndex("WalletId", "CreatedAt");

                    b.ToTable("Transactions", null, t =>
                        {
                            t.HasCheckConstraint("CK_Transactions_Status_UPPER", "Status = UPPER(Status)");

                            t.HasCheckConstraint("CK_Transactions_Type_UPPER", "Type = UPPER(Type)");
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BatteryCapacityKwh")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxPowerKw")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModelName")
                        .IsUnique();

                    b.ToTable("VehicleModels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 200,
                            BatteryCapacityKwh = 42.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 60,
                            ModelName = "VinFast VF e34",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 201,
                            BatteryCapacityKwh = 19.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 32,
                            ModelName = "VinFast VF 3 Eco",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 202,
                            BatteryCapacityKwh = 22.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 37,
                            ModelName = "VinFast VF 3 Plus",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 203,
                            BatteryCapacityKwh = 37.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 100,
                            ModelName = "VinFast VF 5 Plus",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 204,
                            BatteryCapacityKwh = 59.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 150,
                            ModelName = "VinFast VF 6 Standard",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 205,
                            BatteryCapacityKwh = 59.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 160,
                            ModelName = "VinFast VF 6 Plus",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 206,
                            BatteryCapacityKwh = 75.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 180,
                            ModelName = "VinFast VF 7 Standard",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 207,
                            BatteryCapacityKwh = 75.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 200,
                            ModelName = "VinFast VF 7 Plus",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 208,
                            BatteryCapacityKwh = 87.7m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 150,
                            ModelName = "VinFast VF 8 Eco",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 209,
                            BatteryCapacityKwh = 92.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 170,
                            ModelName = "VinFast VF 8 Plus",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 210,
                            BatteryCapacityKwh = 92.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 200,
                            ModelName = "VinFast VF 9 Eco",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 211,
                            BatteryCapacityKwh = 123.0m,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxPowerKw = 220,
                            ModelName = "VinFast VF 9 Plus",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.VehicleModelConnectorType", b =>
                {
                    b.Property<int>("VehicleModelId")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorTypeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleModelId", "ConnectorTypeId");

                    b.HasIndex("ConnectorTypeId");

                    b.ToTable("VehicleModelConnectorTypes", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleModelId = 200,
                            ConnectorTypeId = 3
                        },
                        new
                        {
                            VehicleModelId = 200,
                            ConnectorTypeId = 1
                        },
                        new
                        {
                            VehicleModelId = 201,
                            ConnectorTypeId = 3
                        },
                        new
                        {
                            VehicleModelId = 201,
                            ConnectorTypeId = 1
                        },
                        new
                        {
                            VehicleModelId = 202,
                            ConnectorTypeId = 3
                        },
                        new
                        {
                            VehicleModelId = 202,
                            ConnectorTypeId = 1
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.WalletSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RemainingKwh")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("WalletId");

                    b.HasIndex("WalletId", "Status");

                    b.ToTable("WalletSubscriptions", null, t =>
                        {
                            t.HasCheckConstraint("CK_WalletSubscriptions_Status_UPPER", "Status = UPPER(Status)");
                        });
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Booking", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.Charger", "Charger")
                        .WithMany()
                        .HasForeignKey("ChargerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoElectrify.BLL.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoElectrify.BLL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Charger");

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Charger", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.ConnectorType", "ConnectorType")
                        .WithMany("Chargers")
                        .HasForeignKey("ConnectorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoElectrify.BLL.Entities.Station", "Station")
                        .WithMany("Chargers")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConnectorType");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.ChargerLog", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.Charger", "Charger")
                        .WithMany("ChargerLogs")
                        .HasForeignKey("ChargerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charger");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.ChargingSession", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.Booking", "Booking")
                        .WithOne("ChargingSession")
                        .HasForeignKey("GoElectrify.BLL.Entities.ChargingSession", "BookingId");

                    b.HasOne("GoElectrify.BLL.Entities.Charger", "Charger")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("ChargerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoElectrify.BLL.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoElectrify.BLL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Charger");

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.ExternalLogin", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.User", "User")
                        .WithMany("ExternalLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Incident", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.Charger", "Charger")
                        .WithMany()
                        .HasForeignKey("ChargerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoElectrify.BLL.Entities.User", "ReportedByUser")
                        .WithMany()
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoElectrify.BLL.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Charger");

                    b.Navigation("ReportedByUser");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.RefreshToken", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.StationStaff", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.Station", "Station")
                        .WithMany("StationStaff")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoElectrify.BLL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.TopupIntent", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Transaction", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.ChargingSession", "ChargingSession")
                        .WithMany("Transactions")
                        .HasForeignKey("ChargingSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoElectrify.BLL.Entities.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingSession");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.User", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.VehicleModelConnectorType", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.ConnectorType", "ConnectorType")
                        .WithMany("VehicleModelConnectorTypes")
                        .HasForeignKey("ConnectorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoElectrify.BLL.Entities.VehicleModel", "VehicleModel")
                        .WithMany("VehicleModelConnectorTypes")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectorType");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Wallet", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("GoElectrify.BLL.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.WalletSubscription", b =>
                {
                    b.HasOne("GoElectrify.BLL.Entities.Subscription", "Subscription")
                        .WithMany("WalletSubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoElectrify.BLL.Entities.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Booking", b =>
                {
                    b.Navigation("ChargingSession");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Charger", b =>
                {
                    b.Navigation("ChargerLogs");

                    b.Navigation("ChargingSessions");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.ChargingSession", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.ConnectorType", b =>
                {
                    b.Navigation("Chargers");

                    b.Navigation("VehicleModelConnectorTypes");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Station", b =>
                {
                    b.Navigation("Chargers");

                    b.Navigation("StationStaff");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.Subscription", b =>
                {
                    b.Navigation("WalletSubscriptions");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.User", b =>
                {
                    b.Navigation("ExternalLogins");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("GoElectrify.BLL.Entities.VehicleModel", b =>
                {
                    b.Navigation("VehicleModelConnectorTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
